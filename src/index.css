:root {
  font-family: Inter, Avenir, Helvetica, Arial, sans-serif;
  font-size: 16px;
  line-height: 24px;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-text-size-adjust: 100%;
}

body {
  margin: 0;
  /* display: flex; */
  /* place-items: center; */
  /* min-width: 320px; */
  min-height: 100vh;
  background: purple;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    /* background-color: #ffffff; */
  }
}

#container {
  display: flex;
  flex-direction: row;
}

.sr-only:not(:focus):not(:active),
/* This works, but is sub-optimal. */
::part(icon-button-label) {
  clip: rect(0 0 0 0);
  clip-path: inset(100%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

/* See if we can import this! - Yes we can using unsafe CSS and importing the whole thing; CSS modules would be better! TODO: see about dynamically creating .module.css file and loading *parts* of it! */
button {
  position: absolute;
  top: 0;
  right: -3em;
  width: 3em;
  height: 3em;
  padding: 0;
  margin: 0;
  background: white;
  border: none;
}
button:hover,
button:active,
button:focus {
  background: white;
}

mds-drawer:defined {
  /* background: green; */
  /* opacity: 1; */
  /* TODO: not clear where to divide up these CSS rules...kinda don't want to split concerns across many files but maybe if there's some 'transition' classes or other such 'states' and animations in an external file thats ok? */
  /* transition: all 0.3s ease-in-out; */
  animation-name: slide-from-left, fade-in;
  animation-duration: 0.3s, 0.3s;
  animation-play-state: paused, running;
  /* animation-direction: reverse, normal; */
  /* animation-play-state: initial; */
  /* TOOD: need to figure out how to do drawer behaviour in CSS animations - switch directions etc...Want to use as little JS as possible. Might need to add another class/attribute to handle state change and so CSS - i.e. reflect prop to attribute so it's actually 'true' or 'false': Resume later. Checking out for now. */
}

/* TODO: flesh out initialized styles. See related Codepen.*/
mds-drawer[initialized] {
  border: 10px lime solid;
}

/* Basic fade-in animation. */
@keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

/* TODO: probably re-work animations as specific to Drawer and put the animation definitions in the CSS for the Component? No need to generalize them at the moment really - Just need to have the fade-in animation here for all components as they go from undefined to defined - maybe initial width/margin-left for Drawer too but dunno about that - should use preload maybe to block rendering of component till CSS is loaded anyway? */

/* TODO: rename and re-purpose this file or a similar one to 'shared-component-css' or something similar - should *only* contain CSS for components in general and Drawer etc in specific. */

/* TODO: add an set of keyframes for active facets etc and use that to simply extend regular <details> tag with animation on opening - i.e. animate height - calculate that I guess? */

/* Basic slide-in-from-left animation. */
@keyframes slide-from-left {
  from {
    margin-left: calc(-33vw - 1rem);
  }
  to {
    margin-left: 0;
  }
}

mds-drawer:not(:defined) {
  /* Should basically just be partaking of 'off-screen' styles. */
  margin-left: -1000px;

  /* Not defined, so by definition not visible...need to do animations not transition here! */
  /* opacity: 0; */
  /* transition: opacity 8s ease-in; */
  /* background: red; */
}
