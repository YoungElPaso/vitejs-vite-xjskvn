/* 
Shared utilities and other styles common to all web components. Includes some variables, utilities and initial states for web components
*/

/*
Common variables.
*/
:root {
  --animation-duration: 0.6s;
  --animation-duration-fast: 0.3s;
  --animation-duration-slow: 1.2s;

  /* Loading animation in single line syntax: */
  --loading-animation: fade-in var(--animation-duration) ease-in 300ms backwards;

  /* TODO: need a way to disable all animations as per browser prefs. */
}

/* 
Screen-reader only utility. 
*/
.sr-only:not(:focus):not(:active) {
  clip: rect(0 0 0 0);
  clip-path: inset(100%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

/*
Basic fade-in animation. Used for WC 'hydration' (undefined -> defined) transition.
*/
@keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes snap-in {
  from {
    width: 0;
    height: 0;
    overflow: hidden;
    opacity: 0;
  }
  to {
    height: auto;
    width: auto;
    overflow: auto;
    opacity: 1;
  }
}

/* 
  Drawer component.
*/
mds-drawer:not(:defined) {
  /* Drawer should be hidden entirely until element is defined - it's initial state is totally hidden. TODO: revise this explanation. */
  animation: snap-in 0.3s;
  animation-fill-mode: backwards;
  animation-delay: 400ms;
  overflow: hidden;
  display: block;
}

mds-drawer:defined {
  /* Animate with fade-in when defined. */
  animation: var(--loading-animation);
}

/* 
  Mobile adapted content component. 
*/
mds-mobile-adapted-content:defined {
  /* Animate with fade-in when defined. */
  animation: var(--loading-animation);
}
/* 
  Initial states for mds-mobile-adapted-content based on media-query. TODO: probably should go in own file since it's not yet part of required components.
*/
@media (min-width: 420px) {
  /* If on desktop, hide all mobile-only slot content. */
  [slot='mobile-only'] {
    display: none !important;
  }
}
@media (max-width: 420px) {
  /* If on mobile, show only mobile-only slot content. */
  [slot='desktop'] {
    display: none !important;
  }
}

/* 
  Extra-details component.
*/
mds-extra-details {
  display: block;
  /* Use loading animation to avoid FOUC and suggest hyrdation process to user. */
  animation: var(--loading-animation);
}
mds-extra-details [slot='summary'] {
  /* Set a standard size for the summary slot. */
  font-size: 1rem;
  margin: 0;
  /* Ensure any block-level element is rendered inline-block instead. */
  display: inline-block;
}

/* Styles for extra-details lightDOM elements before hydration/defined. */
mds-extra-details:not(:defined) * {
  /* Timer/loading animation to suggest interim 'loading' period between custom element not defined and defined. Allows lightDOM to 'load' and behave same way as shadowDOM even if there's no JS enabled. Helps avoid FOUC when JS is enabled as well. */
  animation: var(--loading-animation);
  /* TODO: 
  - did lightDOM timer technique: explain on Twitter/tell AC. */
}
