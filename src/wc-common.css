/* 
Shared utilities and other styles common to all web components. Includes some variables, utilities and initial states for web components.
*/

/*
Common variables.
*/
:root {
  --animation-duration: 0.6s;
  --animation-duration-fast: 0.3s;
  --animation-duration-slow: 1.2s;

  /* Loading animation expressed in single line syntax: */
  --loading-animation: fade-in var(--animation-duration) ease-in 300ms backwards;
}

/* Disable all animations as per user preferences. */
@media (prefers-reduced-motion) {
  *,
  *:before,
  *:after {
    transition-property: none !important;
    transform: none !important;
    animation: none !important;
  }
}

/* 
Screen-reader only utility. 
*/
.sr-only:not(:focus):not(:active) {
  clip: rect(0 0 0 0);
  clip-path: inset(100%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

/*
Basic fade-in animation. Used for WC 'hydration' (undefined -> defined) transition.
*/
@keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

/* 
Snap-in animation: allows an element to be visually hidden/nearly equivalent to display:none. Why animation at all? - so elements can transition from one state to the other without selectors or JS, just animation delay/timing/fill-mode props. Note: height/width are set to 'auto' in 'to' frame and thus 'snap'  ('auto' is not accepted as animatable value!).
*/
@keyframes snap-in {
  from {
    /* Hide element by making it tiny! */
    width: 0;
    height: 0;
    overflow: hidden;
  }
  to {
    height: auto;
    width: auto;
    overflow: auto;
  }
}

/* 
  Drawer component.
*/
/* Undefined state for mds-drawer. */
mds-drawer:not(:defined) {
  /* Drawer initial state is totally hidden - snap-in animation allows that to change so non-JS users can still see it. JS users will get the mds-drawer in defined state with loading animation. */
  animation: snap-in 0.3s;
  animation-fill-mode: backwards;
  animation-delay: 400ms;
  /* Required for animation. */
  display: block;
}

/* Defined state for mds-drawer. */
mds-drawer {
  /* Animate with fade-in when defined. */
  animation: var(--loading-animation);
}

/* 
  Mobile adapted content component. 
  TODO: probably should go in own file since it's not yet part of required components.
*/
/* Defined state for mds-mobile-adapted-content. */
mds-mobile-adapted-content {
  /* Animate with fade-in when defined. */
  animation: var(--loading-animation);
}
/* 
  Initial states for mds-mobile-adapted-content slots based on media-query. 
*/
@media (min-width: 420px) {
  /* If on desktop, hide all mobile-only slot content. Use important to take precedence over all defined/undefined states. */
  [slot='mobile-only'] {
    display: none !important;
  }
}
@media (max-width: 420px) {
  /* If on mobile, show only mobile-only slot content. Use important to take precedence over all defined/undefined states. */
  [slot='desktop'] {
    display: none !important;
  }
}

/* 
  Extra-details component.
*/
/* Defined state. */
mds-extra-details {
  display: block;
  /* Use loading animation to avoid FOUC and suggest loading process to user. */
  animation: var(--loading-animation);
}
/* Summary slot styling. */
mds-extra-details [slot='summary'] {
  /* Set a standard size for the summary slot so final text size is uniform. */
  font-size: 1rem;
  margin: 0;
  /* Ensure any block-level element is rendered inline-block instead. */
  display: inline-block;
}

/* Styles for extra-details child lightDOM elements before defined. */
mds-extra-details:not(:defined) * {
  /* Timer/loading animation to suggest interim 'loading' period between custom element not defined and defined. Allows lightDOM to 'load' and behave same way as shadowDOM even if there's no JS enabled. Helps avoid FOUC when JS is enabled as well. */
  animation: var(--loading-animation);
}
