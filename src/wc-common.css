/* 
Shared utilities and other styles common to all web components. Includes some variables, utilities and initial states for web components
*/

/*
Common variables.
*/
:root {
  --animation-duration: 0.6s;
  --animation-duration-fast: 0.3s;
  --animation-duration-slow: 1.2s;
}

/* 
Screen-reader only utility. 
*/
.sr-only:not(:focus):not(:active) {
  clip: rect(0 0 0 0);
  clip-path: inset(100%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

/*
Basic fade-in animation. Used for WC 'hydration' (undefined -> defined) transition.
*/
@keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

/* 
  Drawer component.
*/
mds-drawer:not(:defined) {
  /* Drawer should be hidden entirely until element is defined - it's initial state is totally hidden. */
  display: none;
}

mds-drawer:defined {
  /* Animate with fade-in when defined. */
  animation: fade-in var(--animation-duration);
}

/* 
  Mobile adapted content component. 
*/
mds-mobile-adapted-content:defined {
  /* Animate with fade-in when defined. */
  animation: fade-in var(--animation-duration);
}
/* 
  Initial states for mds-mobile-adapted-content based on media-query. TODO: probably should go in own file.
*/
@media (min-width: 420px) {
  /* If on desktop, hide all mobile-only slot content. */
  [slot='mobile-only'] {
    display: none;
  }
}
@media (max-width: 420px) {
  /* If on mobile, show only mobile-only slot content. */
  [slot='desktop'] {
    display: none;
  }
}

/* 
  Extra-details component.
*/
mds-extra-details {
  display: block;
  animation: fade-in var(--animation-duration) ease-in 400ms backwards;
}
mds-extra-details [slot='summary'] {
  /* Set a standard size for the summary slot. */
  font-size: 1rem;
  margin: 0;
  /* Ensure any block-level element is rendered inline-block instead. */
  display: inline-block;
}

mds-extra-details:not(:defined) {
  display: block; /* TODO: is this useful? Might be! */
}

mds-extra-details:not(:defined) * {
  /* Timer animation to suggest interim 'loading' period between custom element not defined and defined. Allows lightDOM to 'load' and behave same way as shadowDOM even if there's no JS enabled. Helps avoid FOUC when JS is enabled as well. TODO: generalize this to all the other custom elements? */
  /* animation-name: fade-in; */
  /* animation-duration: var(--animation-duration-slow); */
  /* animation-delay: 400ms; */
  /* animation-fill-mode: backwards; */
  animation: fade-in var(--animation-duration) ease-in 400ms backwards;
  /* TODO: 
  - did lightDOM timer technique: explain on Twitter/tell AC. */
}
